{"version":3,"sources":["serviceWorker.js","Layouts/Header.js","Components/Card.js","Containers/CardList.js","Components/SearchBar.js","Layouts/Scroll.js","ScreenView.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","Component","Card","this","props","user","name","email","id","src","alt","style","CardList","_getCardList","robots","map","i","key","SearchBar","_onSearch","e","setState","keyword","target","value","onSearchChange","state","type","placeholder","onChange","Scroll","overflowY","borderTop","borderBottom","height","children","ScreenView","_onSearchChange","receivedKeyword","filteredRobots","filter","robot","toLowerCase","includes","searchedArray","fetch","then","response","json","users","length","role","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCChBeC,E,iLAEjB,OACE,yBAAKC,UAAU,YACb,iD,GAJ4BC,aCAfC,E,iLACT,IAAD,EACqBC,KAAKC,MAAMC,KAA/BC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,GACrB,OACE,yBAAKR,UAAU,0CACb,yBACEA,UAAU,eACVS,IAAG,+BAA0BD,EAA1B,YACHE,IAAI,cAEN,yBAAKV,UAAU,aACb,wBAAIA,UAAU,aAAaW,MAAO,CAAE,WAAc,SAC/CL,GAEH,uBAAGN,UAAU,aAAaO,S,GAdFN,aCCbW,E,2MAUnBC,aAAe,WACb,OAAO,EAAKT,MAAMU,OAAOC,IAAI,SAACV,EAAMW,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,KAAMA,O,wEAV7B,OACE,yBAAKL,UAAU,iGACZG,KAAKU,oB,GAJwBZ,aCDjBiB,E,YACnB,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAuBRe,UAAY,SAAAC,GACV,EAAKC,SACH,CACEC,QAASF,EAAEG,OAAOC,OAEpB,WACE,EAAKpB,MAAMqB,eAAe,EAAKC,MAAMJ,YA3BzC,EAAKI,MAAQ,CACXJ,QAAS,IAJM,E,sEASjB,OACE,yBAAKtB,UAAU,uBACb,yBAAKA,UAAU,oBACb,2BACE2B,KAAK,OACL3B,UAAU,eACV4B,YAAY,yBACZC,SAAU1B,KAAKgB,kB,GAjBYlB,aCAlB6B,E,iLAEjB,OACE,yBACEnB,MAAO,CACLoB,UAAW,SACXC,UAAW,mBACXC,aAAc,mBACdC,OAAQ,MAGT/B,KAAKC,MAAM+B,c,GAXgBlC,aCKfmC,E,YACnB,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAgDRiC,gBAAkB,SAAAf,GAChB,IAAIgB,EAAkBhB,EAClBiB,EAAiB,EAAKb,MAAMZ,OAAO0B,OAAO,SAAAC,GAC5C,OAAOA,EAAMnC,KAAKoC,cAAcC,SAASL,EAAgBI,iBAE3D,EAAKrB,SAAS,CACZuB,cAAeL,KApDjB,EAAKb,MAAQ,CACXZ,OAAQ,GACR8B,cAAe,IALA,E,iFASE,IAAD,OAClBC,MAAM,8CACHC,KAAK,SAAAC,GACJ,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJ,EAAK5B,SAAS,CACZP,OAAQmC,Q,+BAKP,MAE2B9C,KAAKuB,MAA/BZ,EAFD,EAECA,OAAQ8B,EAFT,EAESA,cAEhB,OAAQ9B,EAAOoC,OAQb,yBAAKlD,UAAU,mBACb,6BAASA,UAAU,aACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWyB,eAAgBtB,KAAKkC,mBAElC,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEvB,OAAiC,IAAzB8B,EAAcM,OAAeN,EAAgB9B,MAd3D,yBACEd,UAAU,+CACVmD,KAAK,UAEL,wBAAInD,UAAU,WAAd,mB,GA/BgCC,a,MCAzBmD,MAJf,WACE,OAAO,kBAAC,EAAD,OCETC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SR2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMb,KAAK,SAAAc,GACjCA,EAAaC,gB","file":"static/js/main.bf790813.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"col-auto\">\n        <h1>Robotfriends</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Card extends Component {\n  render() {\n    const { name, email, id } = this.props.user;\n    return (\n      <div className=\"cardItem card col-auto m-3 text-center\">\n        <img\n          className=\"card-img-top\"\n          src={`https://robohash.org/${id}?200x200`}\n          alt=\"something\"\n        />\n        <div className=\"card-body\">\n          <h4 className=\"card-title\" style={{ \"fontWeight\": \"bold\" }}>\n            {name}\n          </h4>\n          <p className=\"card-text\">{email}</p>\n        </div>\n      </div>\n    );\n  }\n\n  /* --------------- methods --------------- */\n}\n","import React, { Component } from \"react\";\nimport Card from \"../Components/Card\";\n\nexport default class CardList extends Component {\n  render() {\n    return (\n      <div className=\"cardList  col-xl-10 d-flex flex-wrap justify-content-center align-item-around container-fluid\">\n        {this._getCardList()}\n      </div>\n    );\n  }\n\n  /* --------------- methods --------------- */\n  _getCardList = () => {\n    return this.props.robots.map((user, i) => {\n      return <Card key={i} user={user} />;\n    });\n  };\n}\n","import React, { Component } from \"react\";\n\nexport default class SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      keyword: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"container searchBar\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Type a robot's name...\"\n            onChange={this._onSearch}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  /* --------------- methods --------------- */\n  _onSearch = e => {\n    this.setState(\n      {\n        keyword: e.target.value\n      },\n      () => {\n        this.props.onSearchChange(this.state.keyword);\n      }\n    );\n  };\n}\n","import React, { Component } from \"react\";\n\nexport default class Scroll extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          overflowY: \"scroll\",\n          borderTop: \"4.5px solid #222\",\n          borderBottom: \"4.5px solid #222\",\n          height: 720\n        }}\n      >\n        {this.props.children}\n      </div>\n      /* NOTE Scroll is partent of CardList so props.children is loaded to render Cardlist within Scroll. Also, Scroll is reusable. */\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Header from \"./Layouts/Header\";\nimport CardList from \"./Containers/CardList\";\n// import robots from \"./Components/robots\";\nimport SearchBar from \"./Components/SearchBar\";\nimport Scroll from \"./Layouts/Scroll\";\n\nexport default class ScreenView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      robots: [],\n      searchedArray: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        this.setState({\n          robots: users\n        });\n      });\n  }\n\n  render() {\n    // NOTE Apply destructuring objects to make code cleaner\n    const { robots, searchedArray } = this.state;\n\n    return !robots.length ? (\n      <div\n        className=\"d-flex justify-content-center spinner-border\"\n        role=\"status\"\n      >\n        <h1 className=\"sr-only\">Loading...</h1>\n      </div>\n    ) : (\n      <div className=\"background pt-5\">\n        <section className=\"appHeader\">\n          <Header />\n          <SearchBar onSearchChange={this._onSearchChange} />\n        </section>\n        <Scroll>\n          <CardList\n            robots={searchedArray.length !== 0 ? searchedArray : robots}\n          />\n        </Scroll>\n      </div>\n    );\n    /* NOTE CardList is now a children of Scroll */\n  }\n\n  /* --------------- methods --------------- */\n  _onSearchChange = keyword => {\n    let receivedKeyword = keyword;\n    let filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(receivedKeyword.toLowerCase());\n    });\n    this.setState({\n      searchedArray: filteredRobots\n    });\n  };\n}\n","import React from \"react\";\nimport ScreenView from \"./ScreenView\";\nimport \"./App.css\";\nfunction App() {\n  return <ScreenView />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}